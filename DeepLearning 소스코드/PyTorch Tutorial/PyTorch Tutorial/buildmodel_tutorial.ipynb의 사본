{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"McVbWv8acjpA"},"outputs":[],"source":["# Google Colab에서 노트북을 실행하실 때에는\n","# https://tutorials.pytorch.kr/beginner/colab 를 참고하세요.\n","%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"dnEyg6wWcjpD"},"source":["\n","[파이토치(PyTorch) 기본 익히기](intro.html) ||\n","[빠른 시작](quickstart_tutorial.html) ||\n","[텐서(Tensor)](tensorqs_tutorial.html) ||\n","[Dataset과 Dataloader](data_tutorial.html) ||\n","[변형(Transform)](transforms_tutorial.html) ||\n","**신경망 모델 구성하기** ||\n","[Autograd](autogradqs_tutorial.html) ||\n","[최적화(Optimization)](optimization_tutorial.html) ||\n","[모델 저장하고 불러오기](saveloadrun_tutorial.html)\n","\n","# 신경망 모델 구성하기\n","\n","신경망은 데이터에 대한 연산을 수행하는 계층(layer)/모듈(module)로 구성되어 있습니다.\n","[torch.nn](https://pytorch.org/docs/stable/nn.html) 네임스페이스는 신경망을 구성하는데 필요한 모든 구성 요소를 제공합니다.\n","PyTorch의 모든 모듈은 [nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html) 의 하위 클래스(subclass)\n","입니다. 신경망은 다른 모듈(계층; layer)로 구성된 모듈입니다. 이러한 중첩된 구조는 복잡한 아키텍처를 쉽게 구축하고 관리할 수 있습니다.\n","\n","이어지는 장에서는 FashionMNIST 데이터셋의 이미지들을 분류하는 신경망을 구성해보겠습니다.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jI6lSBQxcjpE"},"outputs":[],"source":["import os\n","import torch\n","from torch import nn\n","from torch.utils.data import DataLoader\n","from torchvision import datasets, transforms"]},{"cell_type":"markdown","metadata":{"id":"9Dn4_SglcjpF"},"source":["## 학습을 위한 장치 얻기\n","\n","가능한 경우 GPU 또는 MPS와 같은 하드웨어 가속기에서 모델을 학습하려고 합니다.\n","[torch.cuda](https://pytorch.org/docs/stable/notes/cuda.html) 또는 [torch.backends.mps](https://pytorch.org/docs/stable/notes/mps.html)\n","가 사용 가능한지 확인해보고, 그렇지 않으면 CPU를 계속 사용합니다.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6ttQ5_T8cjpF"},"outputs":[],"source":["device = (\n","    \"cuda\"\n","    if torch.cuda.is_available()\n","    else \"mps\"\n","    if torch.backends.mps.is_available()\n","    else \"cpu\"\n",")\n","print(f\"Using {device} device\")"]},{"cell_type":"markdown","metadata":{"id":"C0L_L6LRcjpF"},"source":["## 클래스 정의하기\n","\n","신경망 모델을 ``nn.Module`` 의 하위클래스로 정의하고, ``__init__`` 에서 신경망 계층들을 초기화합니다.\n","``nn.Module`` 을 상속받은 모든 클래스는 ``forward`` 메소드에 입력 데이터에 대한 연산들을 구현합니다.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"btzltpL-cjpF"},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.flatten = nn.Flatten()\n","        self.linear_relu_stack = nn.Sequential(\n","            nn.Linear(28*28, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 10),\n","        )\n","\n","    def forward(self, x):\n","        x = self.flatten(x)\n","        logits = self.linear_relu_stack(x)\n","        return logits"]},{"cell_type":"markdown","metadata":{"id":"z5pXT99TcjpG"},"source":["``NeuralNetwork`` 의 인스턴스(instance)를 생성하고 이를 ``device`` 로 이동한 뒤,\n","구조(structure)를 출력합니다.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"owQe08bDcjpG"},"outputs":[],"source":["model = NeuralNetwork().to(device)\n","print(model)"]},{"cell_type":"markdown","metadata":{"id":"OIpRVooocjpH"},"source":["모델을 사용하기 위해 입력 데이터를 전달합니다. 이는 일부\n","[백그라운드 연산들](https://github.com/pytorch/pytorch/blob/270111b7b611d174967ed204776985cefca9c144/torch/nn/modules/module.py#L866) 과 함께\n","모델의 ``forward`` 를 실행합니다. ``model.forward()`` 를 직접 호출하지 마세요!\n","\n","모델에 입력을 전달하여 호출하면 2차원 텐서를 반환합니다. 2차원 텐서의 dim=0은 각 분류(class)에 대한 원시(raw) 예측값 10개가,\n","dim=1에는 각 출력의 개별 값들이 해당합니다.\n","원시 예측값을 ``nn.Softmax`` 모듈의 인스턴스에 통과시켜 예측 확률을 얻습니다.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-flVEEUXcjpH"},"outputs":[],"source":["X = torch.rand(1, 28, 28, device=device)\n","logits = model(X)\n","pred_probab = nn.Softmax(dim=1)(logits)\n","y_pred = pred_probab.argmax(1)\n","print(f\"Predicted class: {y_pred}\")"]},{"cell_type":"markdown","metadata":{"id":"wLigwGmWcjpH"},"source":["------------------------------------------------------------------------------------------\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"X7gqq7LJcjpH"},"source":["## 모델 계층(Layer)\n","\n","FashionMNIST 모델의 계층들을 살펴보겠습니다. 이를 설명하기 위해, 28x28 크기의 이미지 3개로 구성된\n","미니배치를 가져와, 신경망을 통과할 때 어떤 일이 발생하는지 알아보겠습니다.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rUrhXSDncjpH"},"outputs":[],"source":["input_image = torch.rand(3,28,28)\n","print(input_image.size())"]},{"cell_type":"markdown","metadata":{"id":"BMqZmZC8cjpH"},"source":["### nn.Flatten\n","[nn.Flatten](https://pytorch.org/docs/stable/generated/torch.nn.Flatten.html) 계층을 초기화하여\n","각 28x28의 2D 이미지를 784 픽셀 값을 갖는 연속된 배열로 변환합니다. (dim=0의 미니배치 차원은 유지됩니다.)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0OrJl7eacjpI"},"outputs":[],"source":["flatten = nn.Flatten()\n","flat_image = flatten(input_image)\n","print(flat_image.size())"]},{"cell_type":"markdown","metadata":{"id":"c8xiTog_cjpI"},"source":["### nn.Linear\n","[선형 계층](https://pytorch.org/docs/stable/generated/torch.nn.Linear.html) 은 저장된 가중치(weight)와\n","편향(bias)을 사용하여 입력에 선형 변환(linear transformation)을 적용하는 모듈입니다.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZmLbmYVTcjpI"},"outputs":[],"source":["layer1 = nn.Linear(in_features=28*28, out_features=20)\n","hidden1 = layer1(flat_image)\n","print(hidden1.size())"]},{"cell_type":"markdown","metadata":{"id":"Z_dIy07ocjpI"},"source":["### nn.ReLU\n","비선형 활성화(activation)는 모델의 입력과 출력 사이에 복잡한 관계(mapping)를 만듭니다.\n","비선형 활성화는 선형 변환 후에 적용되어 *비선형성(nonlinearity)* 을 도입하고, 신경망이 다양한 현상을 학습할 수 있도록 돕습니다.\n","\n","이 모델에서는 [nn.ReLU](https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html) 를 선형 계층들 사이에 사용하지만,\n","모델을 만들 때는 비선형성을 가진 다른 활성화를 도입할 수도 있습니다.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hl9Q8ZK5cjpI"},"outputs":[],"source":["print(f\"Before ReLU: {hidden1}\\n\\n\")\n","hidden1 = nn.ReLU()(hidden1)\n","print(f\"After ReLU: {hidden1}\")"]},{"cell_type":"markdown","metadata":{"id":"9_GzcFC_cjpI"},"source":["### nn.Sequential\n","[nn.Sequential](https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html) 은 순서를 갖는\n","모듈의 컨테이너입니다. 데이터는 정의된 것과 같은 순서로 모든 모듈들을 통해 전달됩니다. 순차 컨테이너(sequential container)를 사용하여\n","아래의 ``seq_modules`` 와 같은 신경망을 빠르게 만들 수 있습니다.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Kg_9KtWOcjpI"},"outputs":[],"source":["seq_modules = nn.Sequential(\n","    flatten,\n","    layer1,\n","    nn.ReLU(),\n","    nn.Linear(20, 10)\n",")\n","input_image = torch.rand(3,28,28)\n","logits = seq_modules(input_image)"]},{"cell_type":"markdown","metadata":{"id":"moWClB3ucjpI"},"source":["### nn.Softmax\n","신경망의 마지막 선형 계층은 [nn.Softmax](https://pytorch.org/docs/stable/generated/torch.nn.Softmax.html) 모듈에 전달될\n","([-\\infty, \\infty] 범위의 원시 값(raw value)인) `logits` 를 반환합니다. logits는 모델의 각 분류(class)에 대한 예측 확률을 나타내도록\n","[0, 1] 범위로 비례하여 조정(scale)됩니다. ``dim`` 매개변수는 값의 합이 1이 되는 차원을 나타냅니다.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3Gjg24x8cjpJ"},"outputs":[],"source":["softmax = nn.Softmax(dim=1)\n","pred_probab = softmax(logits)"]},{"cell_type":"markdown","metadata":{"id":"FVBTZIMTcjpJ"},"source":["## 모델 매개변수\n","\n","신경망 내부의 많은 계층들은 *매개변수화(parameterize)* 됩니다. 즉, 학습 중에 최적화되는 가중치와 편향과 연관지어집니다.\n","``nn.Module`` 을 상속하면 모델 객체 내부의 모든 필드들이 자동으로 추적(track)되며, 모델의 ``parameters()`` 및\n","``named_parameters()`` 메소드로 모든 매개변수에 접근할 수 있게 됩니다.\n","\n","이 예제에서는 각 매개변수들을 순회하며(iterate), 매개변수의 크기와 값을 출력합니다.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oDmt990kcjpJ"},"outputs":[],"source":["print(f\"Model structure: {model}\\n\\n\")\n","\n","for name, param in model.named_parameters():\n","    print(f\"Layer: {name} | Size: {param.size()} | Values : {param[:2]} \\n\")"]},{"cell_type":"markdown","metadata":{"id":"3OFsS3uKcjpJ"},"source":["------------------------------------------------------------------------------------------\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"3iOnL2XYcjpJ"},"source":["## 더 읽어보기\n","- [torch.nn API](https://pytorch.org/docs/stable/nn.html)\n","\n"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.16"},"colab":{"provenance":[{"file_id":"https://github.com/PyTorchKorea/tutorials-kr/blob/master/docs/_downloads/76d764ad694d0795e494a1edbfb068a6/buildmodel_tutorial.ipynb","timestamp":1697073219913}]}},"nbformat":4,"nbformat_minor":0}
{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"RtWn2YbCWp5X","executionInfo":{"status":"ok","timestamp":1697072961252,"user_tz":-540,"elapsed":13,"user":{"displayName":"설성칠","userId":"03387488845439056219"}}},"outputs":[],"source":["# Google Colab에서 노트북을 실행하실 때에는\n","# https://tutorials.pytorch.kr/beginner/colab 를 참고하세요.\n","%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"FtHCpO4eWp5Z"},"source":["\n","[파이토치(PyTorch) 기본 익히기](intro.html) ||\n","**빠른 시작** ||\n","[텐서(Tensor)](tensorqs_tutorial.html) ||\n","[Dataset과 Dataloader](data_tutorial.html) ||\n","[변형(Transform)](transforms_tutorial.html) ||\n","[신경망 모델 구성하기](buildmodel_tutorial.html) ||\n","[Autograd](autogradqs_tutorial.html) ||\n","[최적화(Optimization)](optimization_tutorial.html) ||\n","[모델 저장하고 불러오기](saveloadrun_tutorial.html)\n","\n","# 빠른 시작(Quickstart)\n","이번 장에서는 기계 학습의 일반적인 작업들을 위한 API를 통해 실행됩니다. 더 자세히 알아보려면 각 장(section)의 링크를 참고하세요.\n","\n","## 데이터 작업하기\n","파이토치(PyTorch)에는 [데이터 작업을 위한 기본 요소](https://pytorch.org/docs/stable/data.html) 두가지인\n","``torch.utils.data.DataLoader`` 와 ``torch.utils.data.Dataset`` 가 있습니다.\n","``Dataset`` 은 샘플과 정답(label)을 저장하고, ``DataLoader`` 는 ``Dataset`` 을 순회 가능한 객체(iterable)로 감쌉니다.\n"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"AtpXE-95Wp5b","executionInfo":{"status":"ok","timestamp":1697072965116,"user_tz":-540,"elapsed":3874,"user":{"displayName":"설성칠","userId":"03387488845439056219"}}},"outputs":[],"source":["import torch\n","from torch import nn\n","from torch.utils.data import DataLoader\n","from torchvision import datasets\n","from torchvision.transforms import ToTensor"]},{"cell_type":"markdown","metadata":{"id":"PRYp8tDSWp5b"},"source":["PyTorch는 [TorchText](https://pytorch.org/text/stable/index.html), [TorchVision](https://pytorch.org/vision/stable/index.html) 및\n","[TorchAudio](https://pytorch.org/audio/stable/index.html) 와 같이 도메인 특화 라이브러리를 데이터셋과 함께 제공하고 있습니다.\n","이 튜토리얼에서는 TorchVision 데이터셋을 사용하도록 하겠습니다.\n","\n","``torchvision.datasets`` 모듈은 CIFAR, COCO 등과 같은 다양한 실제 비전(vision) 데이터에 대한\n","``Dataset``\\ ([전체 목록은 여기](https://pytorch.org/vision/stable/datasets.html))\\ 을 포함하고 있습니다.\n","이 튜토리얼에서는 FasionMNIST 데이터셋을 사용합니다.\n","모든 TorchVision ``Dataset`` 은 샘플과 정답을 각각 변경하기 위한 ``transform`` 과 ``target_transform`` 의 두 인자를 포함합니다.\n","\n"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"lYzfI_gPWp5b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697072970740,"user_tz":-540,"elapsed":5640,"user":{"displayName":"설성칠","userId":"03387488845439056219"}},"outputId":"7e74693e-3296-491b-eef3-bc7f24ba90ee"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 26421880/26421880 [00:01<00:00, 17027590.12it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 29515/29515 [00:00<00:00, 265838.52it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4422102/4422102 [00:00<00:00, 5096491.22it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 5148/5148 [00:00<00:00, 16673572.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["# 공개 데이터셋에서 학습 데이터를 내려받습니다.\n","training_data = datasets.FashionMNIST(\n","    root=\"data\",\n","    train=True,\n","    download=True,\n","    transform=ToTensor(),\n",")\n","\n","# 공개 데이터셋에서 테스트 데이터를 내려받습니다.\n","test_data = datasets.FashionMNIST(\n","    root=\"data\",\n","    train=False,\n","    download=True,\n","    transform=ToTensor(),\n",")"]},{"cell_type":"markdown","metadata":{"id":"igvvK_bSWp5c"},"source":["``Dataset`` 을 ``DataLoader`` 의 인자로 전달합니다. 이는 데이터셋을 순회 가능한 객체(iterable)로 감싸고, 자동화된 배치(batch), 샘플링(sampling),\n","섞기(shuffle) 및 다중 프로세스로 데이터 불러오기(multiprocess data loading)를 지원합니다. 여기서는 배치 크기(batch size)를 64로 정의합니다.\n","즉, 데이터로더(dataloader) 객체의 각 요소는 64개의 특징(feature)과 정답(label)을 묶음(batch)으로 반환합니다.\n","\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"YWybmviBWp5c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697072970741,"user_tz":-540,"elapsed":19,"user":{"displayName":"설성칠","userId":"03387488845439056219"}},"outputId":"13b0a42b-1143-4bcb-cdf6-0be7ffacffb7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])\n","Shape of y: torch.Size([64]) torch.int64\n"]}],"source":["batch_size = 64\n","\n","# 데이터로더를 생성합니다.\n","train_dataloader = DataLoader(training_data, batch_size=batch_size)\n","test_dataloader = DataLoader(test_data, batch_size=batch_size)\n","\n","for X, y in test_dataloader:\n","    print(f\"Shape of X [N, C, H, W]: {X.shape}\")\n","    print(f\"Shape of y: {y.shape} {y.dtype}\")\n","    break"]},{"cell_type":"markdown","metadata":{"id":"rNqoJTdwWp5c"},"source":["[PyTorch에서 데이터를 불러오는 방법](data_tutorial.html) 을 자세히 알아보세요.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"85EnxxsjWp5d"},"source":["------------------------------------------------------------------------------------------\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"LytuF83YWp5d"},"source":["## 모델 만들기\n","PyTorch에서 신경망 모델은 [nn.Module](https://pytorch.org/docs/stable/generated/torch.nn.Module.html) 을\n","상속받는 클래스(class)를 생성하여 정의합니다. ``__init__`` 함수에서 신경망의 계층(layer)들을 정의하고 ``forward`` 함수에서\n","신경망에 데이터를 어떻게 전달할지 지정합니다. 가능한 경우 GPU 또는 MPS로 신경망을 이동시켜 연산을 가속(accelerate)합니다.\n","\n"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"m2VkAQdRWp5d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697072975564,"user_tz":-540,"elapsed":4836,"user":{"displayName":"설성칠","userId":"03387488845439056219"}},"outputId":"74d217e3-1e00-4e6c-8e14-0e5d0abfb4bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Using cuda device\n","NeuralNetwork(\n","  (flatten): Flatten(start_dim=1, end_dim=-1)\n","  (linear_relu_stack): Sequential(\n","    (0): Linear(in_features=784, out_features=512, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=512, out_features=512, bias=True)\n","    (3): ReLU()\n","    (4): Linear(in_features=512, out_features=10, bias=True)\n","  )\n",")\n"]}],"source":["# 학습에 사용할 CPU나 GPU, MPS 장치를 얻습니다.\n","device = (\n","    \"cuda\"\n","    if torch.cuda.is_available()\n","    else \"mps\"\n","    if torch.backends.mps.is_available()\n","    else \"cpu\"\n",")\n","print(f\"Using {device} device\")\n","\n","# 모델을 정의합니다.\n","class NeuralNetwork(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.flatten = nn.Flatten()\n","        self.linear_relu_stack = nn.Sequential(\n","            nn.Linear(28*28, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 512),\n","            nn.ReLU(),\n","            nn.Linear(512, 10)\n","        )\n","\n","    def forward(self, x):\n","        x = self.flatten(x)\n","        logits = self.linear_relu_stack(x)\n","        return logits\n","\n","model = NeuralNetwork().to(device)\n","print(model)"]},{"cell_type":"markdown","metadata":{"id":"A3oZSe6DWp5d"},"source":["[PyTorch에서 신경망을 정의하는 방법](buildmodel_tutorial.html) 을 자세히 알아보세요.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"KRcM52NgWp5e"},"source":["------------------------------------------------------------------------------------------\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"uArLtujOWp5e"},"source":["## 모델 매개변수 최적화하기\n","모델을 학습하려면 [손실 함수(loss function)](https://pytorch.org/docs/stable/nn.html#loss-functions) 와\n","[옵티마이저(optimizer)](https://pytorch.org/docs/stable/optim.html) 가 필요합니다.\n","\n"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"sAS707c3Wp5e","executionInfo":{"status":"ok","timestamp":1697072975564,"user_tz":-540,"elapsed":4,"user":{"displayName":"설성칠","userId":"03387488845439056219"}}},"outputs":[],"source":["loss_fn = nn.CrossEntropyLoss()\n","optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)"]},{"cell_type":"markdown","metadata":{"id":"DOVDXCAxWp5e"},"source":["각 학습 단계(training loop)에서 모델은 (배치(batch)로 제공되는) 학습 데이터셋에 대한 예측을 수행하고,\n","예측 오류를 역전파하여 모델의 매개변수를 조정합니다.\n","\n"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"EjdhsrxCWp5e","executionInfo":{"status":"ok","timestamp":1697072975564,"user_tz":-540,"elapsed":4,"user":{"displayName":"설성칠","userId":"03387488845439056219"}}},"outputs":[],"source":["def train(dataloader, model, loss_fn, optimizer):\n","    size = len(dataloader.dataset)\n","    for batch, (X, y) in enumerate(dataloader):\n","        X, y = X.to(device), y.to(device)\n","\n","        # 예측 오류 계산\n","        pred = model(X)\n","        loss = loss_fn(pred, y)\n","\n","        # 역전파\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        if batch % 100 == 0:\n","            loss, current = loss.item(), (batch + 1) * len(X)\n","            print(f\"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]\")"]},{"cell_type":"markdown","metadata":{"id":"Qw0KBAD5Wp5e"},"source":["모델이 학습하고 있는지를 확인하기 위해 테스트 데이터셋으로 모델의 성능을 확인합니다.\n","\n"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"ZSXD3rbFWp5f","executionInfo":{"status":"ok","timestamp":1697072975564,"user_tz":-540,"elapsed":3,"user":{"displayName":"설성칠","userId":"03387488845439056219"}}},"outputs":[],"source":["def test(dataloader, model, loss_fn):\n","    size = len(dataloader.dataset)\n","    num_batches = len(dataloader)\n","    model.eval()\n","    test_loss, correct = 0, 0\n","    with torch.no_grad():\n","        for X, y in dataloader:\n","            X, y = X.to(device), y.to(device)\n","            pred = model(X)\n","            test_loss += loss_fn(pred, y).item()\n","            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n","    test_loss /= num_batches\n","    correct /= size\n","    print(f\"Test Error: \\n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \\n\")"]},{"cell_type":"markdown","metadata":{"id":"ZnC7ic4eWp5f"},"source":["학습 단계는 여러번의 반복 단계 (*에폭(epochs)*) 를 거쳐서 수행됩니다. 각 에폭에서는 모델은 더 나은 예측을 하기 위해  매개변수를 학습합니다.\n","각 에폭마다 모델의 정확도(accuracy)와 손실(loss)을 출력합니다; 에폭마다 정확도가 증가하고 손실이 감소하는 것을 보려고 합니다.\n","\n"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"EeXBVLsSWp5f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697073020845,"user_tz":-540,"elapsed":45284,"user":{"displayName":"설성칠","userId":"03387488845439056219"}},"outputId":"93085e88-facc-4596-868c-24d4b3a00b5e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1\n","-------------------------------\n","loss: 2.295187  [   64/60000]\n","loss: 2.281600  [ 6464/60000]\n","loss: 2.266566  [12864/60000]\n","loss: 2.264892  [19264/60000]\n","loss: 2.247829  [25664/60000]\n","loss: 2.217173  [32064/60000]\n","loss: 2.223965  [38464/60000]\n","loss: 2.191162  [44864/60000]\n","loss: 2.191049  [51264/60000]\n","loss: 2.152125  [57664/60000]\n","Test Error: \n"," Accuracy: 48.6%, Avg loss: 2.148138 \n","\n","Epoch 2\n","-------------------------------\n","loss: 2.158138  [   64/60000]\n","loss: 2.141965  [ 6464/60000]\n","loss: 2.087541  [12864/60000]\n","loss: 2.106655  [19264/60000]\n","loss: 2.052629  [25664/60000]\n","loss: 1.993335  [32064/60000]\n","loss: 2.020399  [38464/60000]\n","loss: 1.940402  [44864/60000]\n","loss: 1.956002  [51264/60000]\n","loss: 1.867771  [57664/60000]\n","Test Error: \n"," Accuracy: 56.4%, Avg loss: 1.870516 \n","\n","Epoch 3\n","-------------------------------\n","loss: 1.907120  [   64/60000]\n","loss: 1.869367  [ 6464/60000]\n","loss: 1.756978  [12864/60000]\n","loss: 1.798365  [19264/60000]\n","loss: 1.688201  [25664/60000]\n","loss: 1.636810  [32064/60000]\n","loss: 1.662348  [38464/60000]\n","loss: 1.559857  [44864/60000]\n","loss: 1.595906  [51264/60000]\n","loss: 1.480681  [57664/60000]\n","Test Error: \n"," Accuracy: 61.7%, Avg loss: 1.501523 \n","\n","Epoch 4\n","-------------------------------\n","loss: 1.575432  [   64/60000]\n","loss: 1.533408  [ 6464/60000]\n","loss: 1.387976  [12864/60000]\n","loss: 1.455745  [19264/60000]\n","loss: 1.340938  [25664/60000]\n","loss: 1.336992  [32064/60000]\n","loss: 1.350684  [38464/60000]\n","loss: 1.272350  [44864/60000]\n","loss: 1.312241  [51264/60000]\n","loss: 1.212464  [57664/60000]\n","Test Error: \n"," Accuracy: 63.6%, Avg loss: 1.236850 \n","\n","Epoch 5\n","-------------------------------\n","loss: 1.320145  [   64/60000]\n","loss: 1.296579  [ 6464/60000]\n","loss: 1.133456  [12864/60000]\n","loss: 1.236879  [19264/60000]\n","loss: 1.114815  [25664/60000]\n","loss: 1.141687  [32064/60000]\n","loss: 1.162450  [38464/60000]\n","loss: 1.095322  [44864/60000]\n","loss: 1.138185  [51264/60000]\n","loss: 1.058683  [57664/60000]\n","Test Error: \n"," Accuracy: 65.0%, Avg loss: 1.075153 \n","\n","Done!\n"]}],"source":["epochs = 5\n","for t in range(epochs):\n","    print(f\"Epoch {t+1}\\n-------------------------------\")\n","    train(train_dataloader, model, loss_fn, optimizer)\n","    test(test_dataloader, model, loss_fn)\n","print(\"Done!\")"]},{"cell_type":"markdown","metadata":{"id":"Zz4BmidrWp5f"},"source":["[모델을 학습하는 방법](optimization_tutorial.html) 을 자세히 알아보세요.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"mMN7V2bmWp5g"},"source":["------------------------------------------------------------------------------------------\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"P7ldo2WDWp5g"},"source":["## 모델 저장하기\n","모델을 저장하는 일반적인 방법은 (모델의 매개변수들을 포함하여) 내부 상태 사전(internal state dictionary)을\n","직렬화(serialize)하는 것입니다.\n","\n"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"OPMtCRh2Wp5g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697073020846,"user_tz":-540,"elapsed":22,"user":{"displayName":"설성칠","userId":"03387488845439056219"}},"outputId":"b2b45582-7c12-4636-f389-69f2a98b56c4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Saved PyTorch Model State to model.pth\n"]}],"source":["torch.save(model.state_dict(), \"model.pth\")\n","print(\"Saved PyTorch Model State to model.pth\")"]},{"cell_type":"markdown","metadata":{"id":"aS4DidktWp5g"},"source":["## 모델 불러오기\n","\n","모델을 불러오는 과정에는 모델 구조를 다시 만들고 상태 사전을 모델에 불러오는 과정이 포함됩니다.\n","\n"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"IANZbBO5Wp5g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697073020846,"user_tz":-540,"elapsed":18,"user":{"displayName":"설성칠","userId":"03387488845439056219"}},"outputId":"61796313-e63c-441b-9623-d8442f8abcb1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":11}],"source":["model = NeuralNetwork().to(device)\n","model.load_state_dict(torch.load(\"model.pth\"))"]},{"cell_type":"markdown","metadata":{"id":"PnqZBPrkWp5g"},"source":["이제 이 모델을 사용해서 예측을 할 수 있습니다.\n","\n"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"sTwADzFsWp5g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697073020847,"user_tz":-540,"elapsed":14,"user":{"displayName":"설성칠","userId":"03387488845439056219"}},"outputId":"2358faf8-f1cc-40e4-c973-a229b8b78b22"},"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted: \"Ankle boot\", Actual: \"Ankle boot\"\n"]}],"source":["classes = [\n","    \"T-shirt/top\",\n","    \"Trouser\",\n","    \"Pullover\",\n","    \"Dress\",\n","    \"Coat\",\n","    \"Sandal\",\n","    \"Shirt\",\n","    \"Sneaker\",\n","    \"Bag\",\n","    \"Ankle boot\",\n","]\n","\n","model.eval()\n","x, y = test_data[0][0], test_data[0][1]\n","with torch.no_grad():\n","    x = x.to(device)\n","    pred = model(x)\n","    predicted, actual = classes[pred[0].argmax(0)], classes[y]\n","    print(f'Predicted: \"{predicted}\", Actual: \"{actual}\"')"]},{"cell_type":"markdown","metadata":{"id":"5P8kaalKWp5g"},"source":["[모델을 저장하고 불러오는 방법](saveloadrun_tutorial.html) 을 자세히 알아보세요.\n","\n","\n"]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.16"},"colab":{"provenance":[{"file_id":"https://github.com/PyTorchKorea/tutorials-kr/blob/master/docs/_downloads/af0caf6d7af0dda755f4c9d7af9ccc2c/quickstart_tutorial.ipynb","timestamp":1697072887855}],"gpuType":"T4"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}